
cross-site-scripting ( xss )

This type of vulnerability is the GodFather of attacks against other users. 
It is by some measure the most prevalent web application vulnerability found in the wild. 
It afflicts the vast majority of live applications, including some of the most security-critical applications on the internet, 
such as those used by online banks.

Types of XSS:

   1. Reflected XSS

   2. Stored XSS

   3. DOM-Based XSS


1. Reflected XSS:

    A very common example of XSS occurs when an application employs a dynamic page to diplay error messages
    to users. Typically, the page takes a parameter containing the message's text and simply renders this text 
    back to the user within it response. This type of mechanism is convenient for developers, because it allows
    them to invoke a customized error page from anywhere in the application without needing to hard-code 
    individual messages within the error page itself.

    For example: http://h4ck3bhi.org/error/page/message.php?message=sorry%2c+an+error+occurred
        
        The html page show like.
        <p>sorry, an error occurred</p>

     This type of behavior of taking use-supplied input and inserting it into the HTML of the
     server's response is one of the signatures of reflected XSS vulnerabilities, and if no filltering
     or sanitization is being peformed, the application is certainly vulnerable.

     The following URL has been crafted to replace the error message with a piece of JavaScript that generates a pop-u dialog:

         For example: http://h4ck3bhi.org/error/page/message.php?message=<script>alert(1);</script>

    Requesting this URL generates an HTML page that contains the following in place of original message:
         <p><script>alert(1);</script></p>

    Sure enough, when the page is rendering within the user's browser, the pop-up message appears
    with the alert dialog-box as taking in above.

    Performing this simple test serves verifies two important things. First, the content of the message parameter
    can be replaced with arbitrary data that gets returned to browser. Second, whatever processing the server-side
    application is performing on this data ( if any ), it is insufficient to prevent us from suppling JavaScript 
    code that is executed when the page is dislayed in the browser.
    
2. Stored XSS:

     A different category of XSS vulnerability is often called stored cross-site-scripting.
     This version aries when data submitted by one user is stored in the application ( typically in a backend database )
     and then is displayed to other user without being filttered or sanitiezed appropriately.
     Stored XSS vulnerabilities are common in applications that support interacton between end users, or where administrative
     staff access user records and data within the same applicaton. For example, consider an aucton application that allows
     buyers to post questions about specific items and sellers to post responeses. If a user post question containing 
     ambedded JavaScript, and that application does't filtter or sanitize this, an attacker can post a crafted question that
     causes arbitrary scripts to execute within the browser of anyone who views the question, including both the seller and other
     potencial buyers.
                     Attacks against stored XSS vulnerabilities typically involve at least two requests to the application.
     In the first, the attacker posts some crafted data containing malicious code that the application stores. In the second, 
     a victim views a page cintaining the attacker's data, and the malicious code is executed when the script is executed
     in the victim's browser. For this reason, the vulnerability is alson sometimes called second-order cross-site-scripting.

3. DOM-Based XSS:

     Both reflected and stored XSS vulneabilities involve a specific pattern of behavior, in which the application takes
     user-controllable data and displays this back to users in an unsafe way. A third category of XSS vulnerabilities
     does not share this characteristic. Here, the process by which the attacker's JavaScript gets executed is as follows:
              a ) A user requests a crafted URL supplied by the attacker and containing embedded JavaScript.
              b ) The server's response does not contain the attcaker's script in any form.
              c ) When the user's browser processes this response, the script is sxecuted nonetheless.
